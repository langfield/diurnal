Usage
-----
- When compiling for an android emulator, if you get a
  ``LocationNotFoundException``, try setting the timezone manually within the
  android system settings.
- If heads-up notifications are not working in the android emulator, try
  uninstalling the app, closing the emulator, and building again.





Let's talk about screens. When the user gets a notification, it contains the
following data:
- Title
- Weight
- Minutes
- Start time

Then, they click the notification, and they're brought to the app. Our first
priority is collecting measurements. So they're brought to a screen that
prompts them with several buttons to select what they did during the last
session. We also want to be able to measure when a task is completed early, or
when other things were done in a block that were unplanned. So there should
eventually be functionality for typing in how long the task took, and adding
additional completed tasks. Maybe there are a couple tap-to-select options for
likely completion times (assuming the completion time is less than the time
allocated for the block).

But right now, we only want the minimal feature set necessary. We want a
program similar to the Erlang ticket system.

So we'll have a screen that prompts you with the data given above in the
notification, but this time for the previous task, and asks if you completed
that block, yes or no. So just a blank screen with the data and two buttons,
yes/no. Very simple. Maybe the time left as well.

Here's a visual:


Brush.+Floss.+Tongue.+Mouthwash.          21:35 -> 23:15 UTC+0
0/100min 3N

                  pass            fail


                         00:35



At any point, when the user opens the app, they'll be presented with this
screen. If they have already completed the block that's currently due, they'll
see the prompt for the next block.

Won't fix
=========
- No screen that shows the whole day, or other blocks besides the current
  prompt.
- No timer until start of next block for when you've completed something early.
- No editing.
- No recording how long a block actually took (yet).
- Timer doesn't turn different colors when time is low.
- All text is the same size.
- No padding between rows.


Design
======
Actions:
- Show notification when time left is 0s (when time runs out)
- Fetch sheet (once every minute, set using a periodic timer in ``initState``)
- Get worksheet (once during initialization)
- Get private key/redirect to form (once during initialization)
- Handle pass/fail (every time user presses button)

Blocks are stored in a stack which we pop from when:
- when time runs out
- on pass/fail

Sheet fetches simply refresh the stack, diurnal keeps track of which block is
current using the pointer in the spreadsheet. Very simple. If you need to
manually change the program's current block, simply move the pointer.

In initState():
- Call awaitable to check for private key and redirect to form if needed (can
  use context in initState as done in current version).
- Instantiate periodic timer to fetch from sheet once-per-minute.

In initWorksheet() async:
- ONLY CALLED ONCE EVER!
- Get worksheet and store as state.
- Refresh.

In updateWorksheet() async:
- If private key or worksheet object are null, do nothing.
- Otherwise, fetch and update stack...
- Read block from top of stack...
- Instantiate/update countdown timer.

In build():
- If stack is null, display ``Fetching data...``.
- Otherwise, read ``dueBlock`` from top of stack...
- Instantiate/update countdown timer...
- Display block (yellow if late).

In onTimerEnd() async:
- Show notification for the old currentBlock.
- Set timer for new currentBlock.
- Refresh.

In passOrFail() async:
- Pop block from top of stack.
- Refresh.

In readPrivateKey() async:
- Await read private key.
- If it doesn't exist, redirect to form.
- Call awaitable to get and store worksheet as state.
- Call ``updateWorksheet()``.
- Refresh.


Need to make a distinction between the block we're currently inside, based on
the local time, and the block we're displaying.

Call these ``currentBlock``, and ``dueBlock``.

In above architecture, we are displaying the ``dueBlock`` at all times, since
we only pop from the stack in ``passOrFail()``. This is good. If you want to
know the currentBlock, it is very easy to simply open Google sheets. So we will
not support showing the ``currentBlock`` when a block is overdue.

This means the timer stops going off on each block when we don't pass or fail
the block. That is bad, so we want to continue making new timers, but we do not
display them.

When a timer goes off, it must be the timer for the currentBlock.

Maybe we can send the notification a little early to compensate.
